{"version":3,"file":"redux-zero.min.js","sources":["../src/utils/shallowEqual.ts","../src/components/Provider.tsx","../src/store/createStore.ts","../src/components/connect.tsx"],"sourcesContent":["export default function shallowEqual(a, b) {\n  for (const i in a) if (a[i] !== b[i]) return false\n  for (const i in b) if (!(i in a)) return false\n  return true\n}\n","import * as React from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface Props {\n  context: object\n}\n\nexport interface State {}\n\nexport default class Provider extends React.Component<Props, State> {\n  static childContextTypes = {\n    store: PropTypes.object\n  }\n  getChildContext() {\n    return this.props.context\n  }\n  render() {\n    const { children } = this.props\n    return React.Children.only(children)\n  }\n}\n","export default function createStore(state = {}) {\n  const listeners = []\n  return {\n    setState(update) {\n      state = { ...state, ...update }\n      listeners.forEach(f => f(state))\n    },\n    subscribe(f) {\n      listeners.push(f)\n    },\n    unsubscribe(f) {\n      const i = listeners.indexOf(f)\n      if (i > -1) {\n        listeners.splice(i, 1)\n      }\n    },\n    getState() {\n      return state\n    }\n  }\n}\n","import * as React from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport shallowEqual from \"../utils/shallowEqual\"\n\nexport default function connect(mapToProps) {\n  return Child =>\n    class Connected extends React.Component {\n      static contextTypes = {\n        store: PropTypes.object\n      }\n      state = this.getProps()\n      componentWillMount() {\n        this.context.store.subscribe(this.update)\n      }\n      componentWillUnmount() {\n        this.context.store.unsubscribe(this.update)\n      }\n      getProps() {\n        const state =\n          (this.context.store && this.context.store.getState()) || {}\n        return mapToProps(state, this.props)\n      }\n      update = () => {\n        const mapped = this.getProps()\n        if (!shallowEqual(mapped, this.state)) {\n          this.setState(mapped)\n        }\n      }\n      render() {\n        return (\n          <Child store={this.context.store} {...this.props} {...this.state} />\n        )\n      }\n    }\n}\n"],"names":["a","b","i","tslib_1.__extends","Provider","this","props","context","children","React.Children","only","store","PropTypes.object","React.Component","state","listeners","setState","update","forEach","f","subscribe","push","unsubscribe","indexOf","splice","getState","mapToProps","Child","_this","getProps","mapped","shallowEqual","Connected","React.createElement","_a"],"mappings":"4ZAAqCA,EAAGC,GACtC,IAAK,IAAMC,KAAKF,EAAG,GAAIA,EAAEE,KAAOD,EAAEC,GAAI,OAAO,EAC7C,IAAK,IAAMA,KAAKD,EAAG,KAAMC,KAAKF,GAAI,OAAO,EACzC,OAAO,gVCMT,4DAWA,OAXsCG,OAIpCC,4BAAA,WACE,OAAOC,KAAKC,MAAMC,SAEpBH,mBAAA,WACU,IAAAI,sBACR,OAAOC,WAAeC,KAAKF,IARtBJ,qBACLO,MAAOC,aAF2BC,oCCTFC,gBAAAA,MAClC,IAAMC,KACN,OACEC,kBAASC,GACPH,OAAaA,EAAUG,GACvBF,EAAUG,QAAQ,SAAAC,GAAK,OAAAA,EAAEL,MAE3BM,mBAAUD,GACRJ,EAAUM,KAAKF,IAEjBG,qBAAYH,GACV,IAAMjB,EAAIa,EAAUQ,QAAQJ,GACxBjB,GAAK,GACPa,EAAUS,OAAOtB,EAAG,IAGxBuB,oBACE,OAAOX,wBCbmBY,GAC9B,OAAO,SAAAC,wBACL,aAAA,qDAIEC,QAAQA,EAAKC,WAYbD,SAAS,WACP,IAAME,EAASF,EAAKC,WACfE,EAAaD,EAAQF,EAAKd,QAC7Bc,EAAKZ,SAASc,MAQpB,OA3BwB3B,OAKtB6B,+BAAA,WACE3B,KAAKE,QAAQI,MAAMS,UAAUf,KAAKY,SAEpCe,iCAAA,WACE3B,KAAKE,QAAQI,MAAMW,YAAYjB,KAAKY,SAEtCe,qBAAA,WACE,IAAMlB,EACHT,KAAKE,QAAQI,OAASN,KAAKE,QAAQI,MAAMc,eAC5C,OAAOC,EAAWZ,EAAOT,KAAKC,QAQhC0B,mBAAA,WACE,OACEC,gBAACN,KAAMhB,MAAON,KAAKE,QAAQI,OAAWN,KAAKC,MAAWD,KAAKS,YAxBzCD,aACfqB,gBACLvB,MAAOC"}