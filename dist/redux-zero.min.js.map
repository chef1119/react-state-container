{"version":3,"file":"redux-zero.min.js","sources":["../src/store/createStore.ts","../src/utils/shallowEqual.ts","../src/components/connect.tsx","../src/components/Provider.tsx"],"sourcesContent":["export default function createStore(state = {}) {\n  const listeners = []\n  return {\n    setState(update) {\n      state = { ...state, ...update }\n      listeners.forEach(f => f(state))\n    },\n    subscribe(f) {\n      listeners.push(f)\n    },\n    unsubscribe(f) {\n      const i = listeners.indexOf(f)\n      if (i > -1) {\n        listeners.splice(i, 1)\n      }\n    },\n    getState() {\n      return state\n    }\n  }\n}\n","export default function shallowEqual(a, b) {\n  for (const i in a) if (a[i] !== b[i]) return false\n  for (const i in b) if (!(i in a)) return false\n  return true\n}\n","import * as React from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport shallowEqual from \"../utils/shallowEqual\"\n\nexport default function connect(mapToProps) {\n  return Child =>\n    class Connected extends React.Component {\n      static contextTypes = {\n        store: PropTypes.object\n      }\n      state = this.getProps()\n      componentWillMount() {\n        this.context.store.subscribe(this.update)\n      }\n      componentWillUnmount() {\n        this.context.store.unsubscribe(this.update)\n      }\n      getProps() {\n        const state =\n          (this.context.store && this.context.store.getState()) || {}\n        return mapToProps(state, this.props)\n      }\n      update = () => {\n        const mapped = this.getProps()\n        if (!shallowEqual(mapped, this.state)) {\n          this.setState(mapped)\n        }\n      }\n      render() {\n        return (\n          <Child store={this.context.store} {...this.props} {...this.state} />\n        )\n      }\n    }\n}\n","import * as React from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface Props {\n  context: object\n}\n\nexport interface State {}\n\nexport default class Provider extends React.Component<Props, State> {\n  static childContextTypes = {\n    store: PropTypes.object\n  }\n  getChildContext() {\n    return this.props.context\n  }\n  render() {\n    const { children } = this.props\n    return React.Children.only(children)\n  }\n}\n"],"names":["state","listeners","setState","update","forEach","f","subscribe","push","unsubscribe","i","indexOf","splice","getState","a","b","mapToProps","Child","_this","getProps","mapped","shallowEqual","tslib_1.__extends","Connected","this","context","store","props","React.createElement","React.Component","_a","PropTypes.object","Provider","children","React.Children","only"],"mappings":"6aAAoCA,gBAAAA,KAClC,IAAMC,KACN,QACEC,kBAASC,GACPH,OAAaA,EAAUG,GACvBF,EAAUG,QAAQ,SAAAC,GAAK,MAAAA,GAAEL,MAE3BM,mBAAUD,GACRJ,EAAUM,KAAKF,IAEjBG,qBAAYH,GACV,GAAMI,GAAIR,EAAUS,QAAQL,EACxBI,IAAK,GACPR,EAAUU,OAAOF,EAAG,IAGxBG,oBACE,MAAOZ,gBCjBwBa,EAAGC,GACtC,IAAK,GAAML,KAAKI,GAAG,GAAIA,EAAEJ,KAAOK,EAAEL,GAAI,OAAO,CAC7C,KAAK,GAAMA,KAAKK,GAAG,KAAML,IAAKI,IAAI,OAAO,CACzC,QAAO,aCCuBE,GAC9B,MAAO,UAAAC,wBACL,aAAA,oDAIEC,SAAQA,EAAKC,WAYbD,SAAS,WACP,GAAME,GAASF,EAAKC,UACfE,GAAaD,EAAQF,EAAKjB,QAC7BiB,EAAKf,SAASiB,MAQpB,MA3BwBE,QAKtBC,+BAAA,WACEC,KAAKC,QAAQC,MAAMnB,UAAUiB,KAAKpB,SAEpCmB,iCAAA,WACEC,KAAKC,QAAQC,MAAMjB,YAAYe,KAAKpB,SAEtCmB,qBAAA,WACE,GAAMtB,GACHuB,KAAKC,QAAQC,OAASF,KAAKC,QAAQC,MAAMb,cAC5C,OAAOG,GAAWf,EAAOuB,KAAKG,QAQhCJ,mBAAA,WACE,MACEK,iBAACX,KAAMS,MAAOF,KAAKC,QAAQC,OAAWF,KAAKG,MAAWH,KAAKvB,YAxBzC4B,aACfC,gBACLJ,MAAOK,iWCCf,4DAWA,MAXsCT,QAIpCU,4BAAA,WACE,MAAOR,MAAKG,MAAMF,SAEpBO,mBAAA,WACU,GAAAC,sBACR,OAAOC,YAAeC,KAAKF,IARtBD,qBACLN,MAAOK,aAF2BF"}